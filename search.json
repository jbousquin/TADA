[{"path":[]},{"path":"usepa.github.io/tada/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"usepa.github.io/tada/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"contribute-to-tada","dir":"Articles","previous_headings":"","what":"Contribute to TADA!","title":"Contributing","text":"encourage read project’s CONTRIBUTING policy (), LICENSE, README. ’re glad ’re thinking contributing EPA open source project! ’re unsure anything, just ask — submit issue pull request anyway. worst can happen ’ll politely ask change something. appreciate friendly contributions. matter , spot error, omission, bug, ’re welcome open issue repo!","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"package-development","dir":"Articles","previous_headings":"","what":"Package Development","title":"Contributing","text":"article walk contribute TADA package. use git-forking workflow, full git tutorial. also complete guide R package development (comprehensive guide R Packages), instead meant checklist general steps. Several references included bottom information R-package development git workflows.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"what-is-github","dir":"Articles","previous_headings":"","what":"What is GitHub?","title":"Contributing","text":"GitHub third-party website offers version-controlled repositories developers scientists can use collaborate projects (e.g., software, text, manuscripts, etc.) real-time. GitHub also provides social networking features allow developers follow open-source projects, share code learn code changes made throughout development process. GitHub named utilizes open-source version control system (VCS) known Git. Setting Git Git Basics Comprehensive Guide: Happy Git GitHub useR","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"required-installations","dir":"Articles","previous_headings":"","what":"Required Installations","title":"Contributing","text":"several programs needed work can begin. admin access computer, can install , otherwise create ticket group following requests. links provided assume Windows computer. Adjustments might needed Mac Linux OS: R RStudio Rtools Git installed, following R packages needed R-package development work:","code":"install.packages(c(\"devtools\", \"rmarkdown\"))"},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"Contributing","text":"see error feedback, best way let us know file issue. Issues labeled help indicate . example, using “Good First Issue” indicate issues good first pickings first contribution open-source project. Pull requests can directly linked specific issue. linked, Repository Administrators can easily review pull request issue time contributor submits pull request. issue can closed pull request merged.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"branches","dir":"Articles","previous_headings":"","what":"Branches","title":"Contributing","text":"new development currently happens develop branch. contribute specific change new code, outside contributors can fork repo develop branch. Contributors work personal fork one specific “task” time. complete, submit pull request request changes merged TADA develop branch. Contributors submit separate pull request “task”. “Tasks” small scope. example, may pertain bug fix update relevant single function. single “task” may also encompass changes made across many functions needed. Another example single “task” make changes documentation improve clarity, example. Furthermore, task may include developing new function, series related functions. cases, tasks can also synonymous issues, pull requests can directly linked specific issue (case, Repository Administrators review pull request issue time issue can closed pull request merged). Complete pull request detailing fixes contributions, tagging TADA repo admins review work. package, please tag cristinamullin (Cristina Mullin) mthawley (Shelly Thawley). Repository Administrators review code contributions external collaborators integrate code commits source code. done ensure code stability consistency prevent degradation code performance. review, admin either accept submission, recommend specific improvements submission, cases reject submission. avoid issues, developers contributing code contact repository admins (Cristina ) early development process maintain contact throughout help ensure submission compatible code base robust addition.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"additional-references","dir":"Articles","previous_headings":"","what":"Additional References","title":"Contributing","text":"R Packages testthat R markdown","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"open-source-code-policy","dir":"Articles","previous_headings":"","what":"Open-Source Code Policy","title":"Contributing","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Contributing","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Contributing","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/tada/articles/CONTRIBUTING.html","id":"contact","dir":"Articles","previous_headings":"","what":"Contact","title":"Contributing","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"WQP Data Harmonization","text":"vignette walk discover, wrangle, harmonize Water Quality Portal (WQP) data multiple organizations.","code":""},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"install-and-load-packages","dir":"Articles","previous_headings":"","what":"Install and load packages","title":"WQP Data Harmonization","text":"install TADA, currently need install GitHub using remotes (shown) devtools. dataRetrieval downloaded CRAN, development version can downloaded directly GitHub (un-comment). following code also install packages , load packages required run vignette R session. Load remotes library installing TADA dataRetrieval GitHub Uncomment lines install latest version TADA dataRetrieval GitHub. Load required libraries run vignette R session","code":"list.of.packages <- c(\"plyr\", \"data.table\", \"dataRetrieval\", \"dplyr\", \"ggplot2\", \"grDevices\", \"magrittr\", \"stringr\", \"utils\", \"RColorBrewer\", \"stats\", \"lubridate\", \"remotes\", \"rlang\", \"tidyverse\", \"knitr\", \"rmarkdown\", \"testthat\", \"usethis\", \"devtools\", \"pkgdown\", \"Rcpp\", \"spelling\")  new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])] if(length(new.packages)) install.packages(new.packages) # If you have any issues loading the remotes library, uncomment the line below to install the \"remotes\" package specifying the repo # install.packages(\"remotes\", repos = \"http://cran.us.r-project.org\")  library(remotes) # remotes::install_github(\"USGS-R/dataRetrieval\", dependencies=TRUE) # remotes::install_github(\"USEPA/TADA\", dependencies=TRUE) library(plyr) library(data.table) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:plyr': #>  #>     arrange, count, desc, failwith, id, mutate, rename, summarise, #>     summarize #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(grDevices) library(magrittr) library(stringr) library(utils) library(RColorBrewer) library(stats) library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:data.table': #>  #>     hour, isoweek, mday, minute, month, quarter, second, wday, week, #>     yday, year #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(rlang) #>  #> Attaching package: 'rlang' #> The following object is masked from 'package:magrittr': #>  #>     set_names #> The following object is masked from 'package:data.table': #>  #>     := library(tidyverse) #> ── Attaching packages #> ─────────────────────────────────────── #> tidyverse 1.3.2 ── #> ✔ tibble  3.1.8     ✔ purrr   0.3.5 #> ✔ tidyr   1.2.1     ✔ forcats 0.5.2 #> ✔ readr   2.1.3      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ rlang:::=()              masks data.table:::=() #> ✖ purrr::%@%()             masks rlang::%@%() #> ✖ dplyr::arrange()         masks plyr::arrange() #> ✖ purrr::as_function()     masks rlang::as_function() #> ✖ lubridate::as.difftime() masks base::as.difftime() #> ✖ dplyr::between()         masks data.table::between() #> ✖ purrr::compact()         masks plyr::compact() #> ✖ dplyr::count()           masks plyr::count() #> ✖ lubridate::date()        masks base::date() #> ✖ tidyr::extract()         masks magrittr::extract() #> ✖ dplyr::failwith()        masks plyr::failwith() #> ✖ dplyr::filter()          masks stats::filter() #> ✖ dplyr::first()           masks data.table::first() #> ✖ purrr::flatten()         masks rlang::flatten() #> ✖ purrr::flatten_chr()     masks rlang::flatten_chr() #> ✖ purrr::flatten_dbl()     masks rlang::flatten_dbl() #> ✖ purrr::flatten_int()     masks rlang::flatten_int() #> ✖ purrr::flatten_lgl()     masks rlang::flatten_lgl() #> ✖ purrr::flatten_raw()     masks rlang::flatten_raw() #> ✖ lubridate::hour()        masks data.table::hour() #> ✖ dplyr::id()              masks plyr::id() #> ✖ lubridate::intersect()   masks base::intersect() #> ✖ purrr::invoke()          masks rlang::invoke() #> ✖ lubridate::isoweek()     masks data.table::isoweek() #> ✖ dplyr::lag()             masks stats::lag() #> ✖ dplyr::last()            masks data.table::last() #> ✖ lubridate::mday()        masks data.table::mday() #> ✖ lubridate::minute()      masks data.table::minute() #> ✖ lubridate::month()       masks data.table::month() #> ✖ dplyr::mutate()          masks plyr::mutate() #> ✖ lubridate::quarter()     masks data.table::quarter() #> ✖ dplyr::rename()          masks plyr::rename() #> ✖ lubridate::second()      masks data.table::second() #> ✖ purrr::set_names()       masks rlang::set_names(), magrittr::set_names() #> ✖ lubridate::setdiff()     masks base::setdiff() #> ✖ purrr::splice()          masks rlang::splice() #> ✖ dplyr::summarise()       masks plyr::summarise() #> ✖ dplyr::summarize()       masks plyr::summarize() #> ✖ purrr::transpose()       masks data.table::transpose() #> ✖ lubridate::union()       masks base::union() #> ✖ lubridate::wday()        masks data.table::wday() #> ✖ lubridate::week()        masks data.table::week() #> ✖ lubridate::yday()        masks data.table::yday() #> ✖ lubridate::year()        masks data.table::year() library(knitr) library(rmarkdown) library(testthat) #>  #> Attaching package: 'testthat' #>  #> The following object is masked from 'package:purrr': #>  #>     is_null #>  #> The following objects are masked from 'package:readr': #>  #>     edition_get, local_edition #>  #> The following object is masked from 'package:tidyr': #>  #>     matches #>  #> The following objects are masked from 'package:rlang': #>  #>     is_false, is_null, is_true #>  #> The following objects are masked from 'package:magrittr': #>  #>     equals, is_less_than, not #>  #> The following object is masked from 'package:dplyr': #>  #>     matches library(usethis) #>  #> Attaching package: 'usethis' #>  #> The following object is masked from 'package:remotes': #>  #>     git_credentials library(devtools) #>  #> Attaching package: 'devtools' #>  #> The following object is masked from 'package:testthat': #>  #>     test_file #>  #> The following objects are masked from 'package:remotes': #>  #>     dev_package_deps, install_bioc, install_bitbucket, install_cran, #>     install_deps, install_dev, install_git, install_github, #>     install_gitlab, install_local, install_svn, install_url, #>     install_version, update_packages library(pkgdown) #>  #> Attaching package: 'pkgdown' #>  #> The following object is masked from 'package:devtools': #>  #>     build_site #>  #> The following object is masked from 'package:rmarkdown': #>  #>     clean_site library(Rcpp) library(spelling) library(dataRetrieval) library(TADA)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"retrieve-wqp-data","dir":"Articles","previous_headings":"","what":"Retrieve WQP data","title":"WQP Data Harmonization","text":"WQP data retrieved processed compatibility TADA. function, TADAdataRetrieval builds USGS dataRetrieval package functions. joins three WQP profiles (.e., station, narrow, phys/chem), changes data Characteristic, Speciation, Fraction, Unit fields uppercase, removes true duplicates, removes data non-water media types, cleans results special characters. function uses inputs dataRetrieval readWQPdata function. readWQPdata restrict characteristics pulled Water Quality Portal (WQP). may specify desired characteristics using, instance: characteristicName = “pH”. Data retrieval filters include: statecode endDate startDate countycode siteid siteType characteristicName ActivityMediaName Please aware TADAdataRetrieval function automatically runs TADA autoclean MeasureValueSpecialCharacters functions well, required subsequent functions within TADA R package run. functions alter /add following WQP columns (enter ?MeasureValueSpecialCharacters ?autoclean console details): Alters (e.g., ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields converted class numeric) ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue Adds (data cleaning transformations done directly “ResultMeasureValue” “DetectionLimitMeasureValue” columns, however original “ResultMeasureValue” “DetectionLimitMeasureValue” columns values WQP preserved new fields, “ResultMeasureValue.Original” “DetectionLimitMeasureValue.Original”. Additionally, “TADA.ResultMeasureValue.Flag” “TADA.DetectionLimitMeasureValue.Flag” created track changes made “ResultMeasureValue” “DetectionLimitMeasureValue” columns; provide information result values needed address censored data later (.e., nondetections). Specifically, new columns flag special characters included result values, specifies special characters . ResultMeasureValue.Original TADA.ResultMeasureValue.Flag DetectionLimitMeasureValue.Original TADA.DetectionLimitMeasureValue.Flag Downloads using TADAdataRetrieval columns time, aware data uploaded Water Quality Portal individual organizations, may may follow conventions. Data metadata quality guaranteed! Make sure carefully explore data make conservative quality assurance decisions information limited. Tips: query filters WQP work within fields ORs. example: Characteristics: choose pH & - ’s . means retrieve pH data available. States: Similarly, choose VA IL, ’s . means retrieve VA IL data available. Combinations fields ANDs, State/VA Characteristic/\". means receive data available VA. “Characteristic” “Characteristic Type” also work . means Characteristic must fall within CharacteristicGroup filters used, get error. “siteid” general term WQP uses describe Site IDs USGS databases Monitoring Location Identifiers (Water Quality Portal). monitoring location Water Quality Portal (WQP) unique Monitoring Location Identifier, regardless database derives. Monitoring Location Identifier WQP concatenated Organization Identifier plus Site ID number. Site IDs include number unique identifiers monitoring locations within USGS NWIS EPA’s WQX databases separately. Additional resources: Review function documentation entering following code console: ?TADAdataRetrieval Introduction dataRetrieval package General Data Import Water Quality Portal Water Quality Portal Web Services Guide dataRetrieval Tutorial Option 1: Use TADAdataRetrieval function. Option 2: Alternatively, can use data.table::fread function read web service call WQP profile (un-comment). Option 3: need download large amount data across large area, TADAdataRetrieval function working due WQP timeout issues, TADABigdataRetrieval function may work better. function multiple synchronous data calls WQP (waterqualitydata.us). uses WQP summary service limit amount downloaded relevant data, pulls back data 100 stations time joins data back together produces single TADA compatible dataframe output. large data sets, can save lot time ultimately reduce complexity subsequent data processing. Using function, able download data available sites contiguous United States available time period, characteristicName, siteType requested. See ?TADABigdataRetrieval details. WARNING, can take multiple hours run. total run time depends query inputs. Review column names TADA Profile","code":"#You can edit this to define your own WQP query inputs below TADAProfile <- TADAdataRetrieval(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"01-01-2021\") # new_fullphyschem <- data.table::fread(\"https://www.waterqualitydata.us/data/Result/search?countrycode=US&statecode=US%3A49&siteid=UTAHDWQ_WQX-4925610&startDateLo=01-01-2015&startDateHi=12-31-2016&mimeType=csv&zip=no&sorted=yes&dataProfile=fullPhysChem&providers=NWIS&providers=STEWARDS&providers=STORET\") #AllWaterTempData <- TADABigdataRetrieval(startDate = \"2019-01-01\", endDate = \"2021-12-31\", characteristicName = \"Temperature, water\", siteType = \"Stream\") colnames(TADAProfile) #>   [1] \"OrganizationIdentifier\"                            #>   [2] \"OrganizationFormalName\"                            #>   [3] \"ActivityIdentifier\"                                #>   [4] \"ActivityTypeCode\"                                  #>   [5] \"ActivityMediaName\"                                 #>   [6] \"ActivityMediaSubdivisionName\"                      #>   [7] \"ActivityStartDate\"                                 #>   [8] \"ActivityStartTime.Time\"                            #>   [9] \"ActivityStartTime.TimeZoneCode\"                    #>  [10] \"ActivityEndDate\"                                   #>  [11] \"ActivityEndTime.Time\"                              #>  [12] \"ActivityEndTime.TimeZoneCode\"                      #>  [13] \"ActivityDepthHeightMeasure.MeasureValue\"           #>  [14] \"ActivityDepthHeightMeasure.MeasureUnitCode\"        #>  [15] \"ActivityDepthAltitudeReferencePointText\"           #>  [16] \"ActivityTopDepthHeightMeasure.MeasureValue\"        #>  [17] \"ActivityTopDepthHeightMeasure.MeasureUnitCode\"     #>  [18] \"ActivityBottomDepthHeightMeasure.MeasureValue\"     #>  [19] \"ActivityBottomDepthHeightMeasure.MeasureUnitCode\"  #>  [20] \"ProjectIdentifier\"                                 #>  [21] \"ActivityConductingOrganizationText\"                #>  [22] \"MonitoringLocationIdentifier\"                      #>  [23] \"ActivityCommentText\"                               #>  [24] \"SampleAquifer\"                                     #>  [25] \"HydrologicCondition\"                               #>  [26] \"HydrologicEvent\"                                   #>  [27] \"SampleCollectionMethod.MethodIdentifier\"           #>  [28] \"SampleCollectionMethod.MethodIdentifierContext\"    #>  [29] \"SampleCollectionMethod.MethodName\"                 #>  [30] \"SampleCollectionEquipmentName\"                     #>  [31] \"ResultDetectionConditionText\"                      #>  [32] \"CharacteristicName\"                                #>  [33] \"ResultSampleFractionText\"                          #>  [34] \"ResultMeasureValue\"                                #>  [35] \"ResultMeasureValue.Original\"                       #>  [36] \"TADA.ResultMeasureValue.Flag\"                      #>  [37] \"ResultMeasure.MeasureUnitCode\"                     #>  [38] \"MeasureQualifierCode\"                              #>  [39] \"ResultStatusIdentifier\"                            #>  [40] \"StatisticalBaseCode\"                               #>  [41] \"ResultValueTypeName\"                               #>  [42] \"ResultWeightBasisText\"                             #>  [43] \"ResultTimeBasisText\"                               #>  [44] \"ResultTemperatureBasisText\"                        #>  [45] \"ResultParticleSizeBasisText\"                       #>  [46] \"PrecisionValue\"                                    #>  [47] \"ResultCommentText\"                                 #>  [48] \"USGSPCode\"                                         #>  [49] \"ResultDepthHeightMeasure.MeasureValue\"             #>  [50] \"ResultDepthHeightMeasure.MeasureUnitCode\"          #>  [51] \"ResultDepthAltitudeReferencePointText\"             #>  [52] \"SubjectTaxonomicName\"                              #>  [53] \"SampleTissueAnatomyName\"                           #>  [54] \"ResultAnalyticalMethod.MethodIdentifier\"           #>  [55] \"ResultAnalyticalMethod.MethodIdentifierContext\"    #>  [56] \"ResultAnalyticalMethod.MethodName\"                 #>  [57] \"MethodDescriptionText\"                             #>  [58] \"LaboratoryName\"                                    #>  [59] \"AnalysisStartDate\"                                 #>  [60] \"ResultLaboratoryCommentText\"                       #>  [61] \"DetectionQuantitationLimitTypeName\"                #>  [62] \"DetectionQuantitationLimitMeasure.MeasureValue\"    #>  [63] \"DetectionLimitMeasureValue.Original\"               #>  [64] \"TADA.DetectionLimitMeasureValue.Flag\"              #>  [65] \"DetectionQuantitationLimitMeasure.MeasureUnitCode\" #>  [66] \"PreparationStartDate\"                              #>  [67] \"ProviderName\"                                      #>  [68] \"ActivityStartDateTime\"                             #>  [69] \"ActivityEndDateTime\"                               #>  [70] \"MonitoringLocationName\"                            #>  [71] \"MonitoringLocationTypeName\"                        #>  [72] \"MonitoringLocationDescriptionText\"                 #>  [73] \"HUCEightDigitCode\"                                 #>  [74] \"DrainageAreaMeasure.MeasureValue\"                  #>  [75] \"DrainageAreaMeasure.MeasureUnitCode\"               #>  [76] \"ContributingDrainageAreaMeasure.MeasureValue\"      #>  [77] \"ContributingDrainageAreaMeasure.MeasureUnitCode\"   #>  [78] \"LatitudeMeasure\"                                   #>  [79] \"LongitudeMeasure\"                                  #>  [80] \"SourceMapScaleNumeric\"                             #>  [81] \"HorizontalAccuracyMeasure.MeasureValue\"            #>  [82] \"HorizontalAccuracyMeasure.MeasureUnitCode\"         #>  [83] \"HorizontalCollectionMethodName\"                    #>  [84] \"HorizontalCoordinateReferenceSystemDatumName\"      #>  [85] \"VerticalMeasure.MeasureValue\"                      #>  [86] \"VerticalMeasure.MeasureUnitCode\"                   #>  [87] \"VerticalAccuracyMeasure.MeasureValue\"              #>  [88] \"VerticalAccuracyMeasure.MeasureUnitCode\"           #>  [89] \"VerticalCollectionMethodName\"                      #>  [90] \"VerticalCoordinateReferenceSystemDatumName\"        #>  [91] \"CountryCode\"                                       #>  [92] \"StateCode\"                                         #>  [93] \"CountyCode\"                                        #>  [94] \"AquiferName\"                                       #>  [95] \"LocalAqfrName\"                                     #>  [96] \"FormationTypeText\"                                 #>  [97] \"AquiferTypeName\"                                   #>  [98] \"ConstructionDateText\"                              #>  [99] \"WellDepthMeasure.MeasureValue\"                     #> [100] \"WellDepthMeasure.MeasureUnitCode\"                  #> [101] \"WellHoleDepthMeasure.MeasureValue\"                 #> [102] \"WellHoleDepthMeasure.MeasureUnitCode\"              #> [103] \"MethodSpecificationName\"                           #> [104] \"ProjectName\"                                       #> [105] \"ProjectDescriptionText\"                            #> [106] \"SamplingDesignTypeCode\"                            #> [107] \"QAPPApprovedIndicator\"                             #> [108] \"QAPPApprovalAgencyName\"                            #> [109] \"ProjectFileUrl\"                                    #> [110] \"ProjectMonitoringLocationWeightingUrl\""},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"depth-unit-conversions","dir":"Articles","previous_headings":"","what":"Depth unit conversions","title":"WQP Data Harmonization","text":"Converts depth units consistent unit. ActivityDepthHeightMeasure.MeasureValue provides depth information. crucial column lake data less often river data. Function checks dataset depth profile data. depth profile columns populated, function appends ‘Conversion Factor’ columns populates columns based original unit (MeasureUnitCode columns) target unit, defined ‘unit’ argument. ‘Depth Target Unit’ column also appended, indicating unit selected depth data converted . transform = FALSE, output includes ‘Conversion Factor’ columns ‘Depth Target Unit’ column. transform = TRUE, output includes converted depth data ‘Depth Target Unit’ column, acts flag indicating rows converted. Default transform = TRUE. depth profile function can harmonize depth units across following fields (specific one): “ActivityDepthHeightMeasure”, “ActivityTopDepthHeightMeasure”, “ActivityBottomDepthHeightMeasure”, “ResultDepthHeightMeasure”). default . Allowable values ‘unit’ either ‘m’ (meter), ‘ft’ (feet), ‘’ (inch). ‘unit’ accepts one allowable value input. Default unit = “m”. See additional function documentation additional function options entering following code console: ?DepthProfileData","code":"#converts all depth profile data to meters TADAProfileClean1 <- DepthProfileData(TADAProfile, unit = \"m\", transform = TRUE) #> Warning in `[<-.data.frame`(`*tmp*`, targetUnit, value = structure(list(: #> provided 2 variables to replace 1 variables  #> Warning in `[<-.data.frame`(`*tmp*`, targetUnit, value = structure(list(: #> provided 2 variables to replace 1 variables"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"result-unit-conversions","dir":"Articles","previous_headings":"","what":"Result unit conversions","title":"WQP Data Harmonization","text":"Converts results WQX target units. WQX target units pulled MeasureUnit domain table: https://cdx.epa.gov/wqx/download/DomainValues/MeasureUnit.CSV See additional function documentation additional function options entering following code console: ?WQXTargetUnits","code":"#Converts all results to WQX target units TADAProfileClean2 <- WQXTargetUnits(TADAProfileClean1, transform = TRUE)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"statistically-aggregated-data","dir":"Articles","previous_headings":"","what":"Statistically aggregated data","title":"WQP Data Harmonization","text":"Checks removes statistically aggregated high frequency (.e., continuous) data, present. Water Quality Portal (WQP) designed store high-frequency sensor data. However, sometimes data providers choose aggregate continuous data submit WQP one value. type data may suitable integration discrete water quality data assessments. Therefore, function uses metadata submitted data providers flags rows aggregated continuous data. done flagging results ResultDetectionConditionText = “Reported Raw Data (attached)” clean = TRUE, rows aggregated continuous data removed dataset column appended Default clean = TRUE See function documentation additional function options entering following code console: ?DepthProfileData","code":"TADAProfileClean3 <- AggregatedContinuousData(TADAProfileClean2, clean = TRUE) #> [1] \"The dataset does not contain aggregated continuous data.\""},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"wqx-qaqc-service-result-flags","dir":"Articles","previous_headings":"","what":"WQX QAQC Service Result Flags","title":"WQP Data Harmonization","text":"Run following result functions address invalid method, fraction, speciation, unit metadata characteristic. default clean = TRUE, remove invalid results. can change clean = FALSE flag results, remove . See documentation details: ?InvalidMethod Clean = FALSE, function adds following column dataframe: WQX.AnalyticalMethodValidity. column flags invalid CharacteristicName, ResultAnalyticalMethod/MethodIdentifier, ResultAnalyticalMethod/MethodIdentifierContext combinations dataset either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataset column appended. ?InvalidSpeciation clean = FALSE, function adds following column dataframe: WQX.MethodSpeciationValidity. column flags CharacteristicName MethodSpecificationName combination dataset either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataset column appended. ?InvalidResultUnit clean = FALSE, following column added dataset: WQX.ResultUnitValidity. column flags CharacteristicName, ActivityMediaName, ResultMeasure/MeasureUnitCode combination dataset either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataset column appended. ?InvalidFraction clean = FALSE, function adds following column dataframe: WQX.SampleFractionValidity. column flags CharacteristicName ResultSampleFractionText combination dataset either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataset column appended.","code":"TADAProfileClean4 <- InvalidMethod(TADAProfileClean3, clean = TRUE) #> [1] \"No changes were made, because we did not find any invalid method/characteristic combinations in your dataset.\" TADAProfileClean5 <- InvalidFraction(TADAProfileClean4, clean = TRUE) #> [1] \"All data is valid, therefore the function cannot be applied.\" TADAProfileClean6 <- InvalidSpeciation(TADAProfileClean5, clean = FALSE) TADAProfileClean7 <- InvalidResultUnit(TADAProfileClean6, clean = FALSE)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"wqx-national-upper-and-lower-thresholds","dir":"Articles","previous_headings":"","what":"WQX national upper and lower thresholds","title":"WQP Data Harmonization","text":"Run following code flag remove results national upper lower bound characteristic unit combination. See documentation details: ?AboveNationalWQXUpperThreshold clean = FALSE, following column added dataset: AboveWQXUpperThreshold. column flags rows data upper WQX threshold. clean = TRUE, data upper WQX threshold removed dataset. ?BelowNationalWQXUpperThreshold clean = FALSE, following column added dataset: BelowWQXUpperThreshold. column flags rows data lower WQX threshold. clean = TRUE, data lower WQX threshold removed dataset. default clean=TRUE, can change flag results desired. Results flagged, removed, clean=FALSE.","code":"TADAProfileClean8 <- AboveNationalWQXUpperThreshold(TADAProfileClean7, clean = TRUE) TADAProfileClean9 <- BelowNationalWQXUpperThreshold(TADAProfileClean8, clean = TRUE)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"potential-duplicates","dir":"Articles","previous_headings":"","what":"Potential duplicates","title":"WQP Data Harmonization","text":"Sometimes multiple organizations submit exact data Water Quality Portal (WQP), can affect water quality analyses assessments. function checks identifies data identical fields excluding organization-specific comment text fields. pair group potential duplicate rows flagged unique ID. information, review documentation entering following console: ?PotentialDuplicateRowID clean = FALSE, following column added dataframe: TADA.PotentialDupRowID. column flags potential duplicate rows data dataset, assigns potential duplicate combination unique number linking two potential duplication rows. clean = FALSE first group potential duplicate rows removed dataset column appended. clean = TRUE, function retains first occurrence potential duplicate dataset. Default clean = TRUE.","code":"TADAProfileClean10 <- PotentialDuplicateRowID(TADAProfileClean9)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"invalid-coordinates","dir":"Articles","previous_headings":"","what":"Invalid coordinates","title":"WQP Data Harmonization","text":"Function identifies flags invalid coordinate data. clean_outsideUSA = FALSE clean_imprecise = FALSE, column appended titled “TADA.InvalidCoordinates” following flags (relevant dataset). latitude less zero, row flagged “LAT_OutsideUSA”. longitude greater zero less 145, row flagged “LONG_OutsideUSA”. latitude longitude contains string, “999”, row flagged invalid. Finally, precision can measured number decimal places latitude longitude provided. either numbers right decimal point, row flagged “Imprecise”.","code":"TADAProfileClean11 <- InvalidCoordinates(TADAProfileClean10, clean_outsideUSA = FALSE, clean_imprecise = FALSE)"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"review-qapp-information","dir":"Articles","previous_headings":"","what":"Review QAPP information","title":"WQP Data Harmonization","text":"Check data approved QAPP function checks see information column “QAPPApprovedIndicator”. organizations submit data field indicate data produced approved Quality Assurance Project Plan (QAPP) . field, Y indicates yes, N indicates . function two default inputs: clean = TRUE cleanNA = FALSE. defaults remove rows data QAPPApprovedIndicator equals “N”. Users alternatively remove N’s NA’s using inputs clean = TRUE cleanNA = TRUE. clean = FALSE cleanNA = FALSE, function anything. Check see QAPP Doc Available function checks data submitted “ProjectFileUrl” column determine QAPP document available review. clean = FALSE, column appended flag results associated QAPP document URL provided. clean = TRUE, rows associated QAPP document removed dataset column appended. function used remove data accompanying QAPP document required use data assessments.","code":"TADAProfileClean12 <- QAPPapproved(TADAProfileClean11, clean = TRUE, cleanNA = FALSE) TADAProfileClean13 <- QAPPDocAvailable(TADAProfileClean12, clean = FALSE) #> Warning in QAPPDocAvailable(TADAProfileClean12, clean = FALSE): The dataset does #> not contain QAPP document url data."},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"filter-data-by-field","dir":"Articles","previous_headings":"","what":"Filter data by field","title":"WQP Data Harmonization","text":"section TADA user want review unique values specific fields may choose remove data particular values. start, review list fields number unique values field. Next, choose field list see unique values field, well number times value appears dataset. ’ll start ActivityTypeCode. list fields review: ResultCommentText often details relating additional QA. MeasureQualifierCode Contains information data flags 3. codes may designate suspect data flags may described detail ResultLaboratoryCommentText another column  ActivityTypeCode field four unique values – “Sample-Routine”, “Quality Control Sample-Field Replicate”, “Field Msr/Obs”, “Quality Control Sample-Field Blank.” example want remove quality control values ActivityTypeCode field, therefore, ’ll specify want remove “Quality Control Sample-Field Replicate” “Quality Control Sample-Field Blank” values ActivityTypeCode field. ’ve completed review ActivityTypeCode field. Let’s move different field see values want remove – ’ll look values ResultStatusIdentifier field.  ActivityMediaSubdivisionName field two unique values, “Surface Water” “Groundwater.” example want remove “Groundwater” values.","code":"FilterFields(TADAProfileClean13) #>                             FieldName Count #> 1              OrganizationFormalName     7 #> 2                    ActivityTypeCode     7 #> 3                   ActivityMediaName     1 #> 4        ActivityMediaSubdivisionName     4 #> 5                 ActivityCommentText     4 #> 6                 HydrologicCondition     8 #> 7                     HydrologicEvent     4 #> 8                  CharacteristicName     3 #> 9                MeasureQualifierCode     4 #> 10            SampleTissueAnatomyName     1 #> 11                     LaboratoryName    11 #> 12 DetectionQuantitationLimitTypeName     7 #> 13         MonitoringLocationTypeName    14 #> 14                        ProjectName     8 FilterFieldReview(\"ActivityTypeCode\", TADAProfileClean13) #>                               FieldValue Count #> 7                         Sample-Routine  5268 #> 6     Sample-Integrated Vertical Profile   474 #> 4 Quality Control Sample-Field Replicate   454 #> 2 Quality Control Sample-Equipment Blank   276 #> 3     Quality Control Sample-Field Blank    60 #> 1                          Field Msr/Obs     4 #> 5   Quality Control Sample-Lab Duplicate     2 TADAProfileClean14 <- dplyr::filter(TADAProfileClean13, !(ActivityTypeCode %in% c(\"Quality Control Sample-Field Replicate\", \"Quality Control Sample-Field Blank\", \"Quality Control Sample-Lab Duplicate\", \"Quality Control Sample-Equipment Blank\"))) FilterFieldReview(\"ActivityMediaSubdivisionName\", TADAProfileClean14) #>        FieldValue Count #> 3   Surface Water   687 #> 2     Groundwater   106 #> 1 Bulk deposition     1 TADAProfileClean15 <- dplyr::filter(TADAProfileClean14, !(ActivityMediaSubdivisionName %in% c(\"Groundwater\", \"Bulk deposition\")))"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"filter-data-by-field-subset-by-parameter","dir":"Articles","previous_headings":"","what":"Filter data by field, subset by parameter","title":"WQP Data Harmonization","text":"section TADA user want select parameter, review unique values associated parameter specific fields, choose remove particular values. start, review list parameters dataset. (list sorted highest lowest counts. first rows displayed save space page) Next, select parameter. Let’s explore fields associated Nitrogen: Selecting parameter generates list , subset selected parameter, fields number unique values field. choose field list. example ’ll remove certain values HydrologicEvent field.  HydrologicEvent field three unique values. example want remove samples collected “Storm” events. Therefore, ’ll specify want remove rows CharacteristicName “NITROGEN” HydrologicEvent field “Storm.”","code":"FilterParList(TADAProfileClean15) #>   FieldValue Count #> 3   NITROGEN  4130 #> 2    NITRATE  1479 #> 1    AMMONIA    30 FilterParFields(TADAProfileClean15, \"NITROGEN\") #>                                         FieldName Count #> 1                                ActivityTypeCode     2 #> 2                               ActivityMediaName     1 #> 3                    ActivityMediaSubdivisionName     2 #> 4                             ActivityCommentText     3 #> 5                             HydrologicCondition     7 #> 6                                 HydrologicEvent     2 #> 7         SampleCollectionMethod.MethodIdentifier     6 #> 8  SampleCollectionMethod.MethodIdentifierContext     2 #> 9               SampleCollectionMethod.MethodName     6 #> 10                  SampleCollectionEquipmentName     6 #> 11                       ResultSampleFractionText     3 #> 12                  ResultMeasure.MeasureUnitCode     2 #> 13                           MeasureQualifierCode     3 #> 14                         ResultStatusIdentifier     2 #> 15                            ResultValueTypeName     1 #> 16                          ResultWeightBasisText     1 #> 17                     ResultTemperatureBasisText     1 #> 18                    ResultParticleSizeBasisText     1 #> 19                              ResultCommentText     7 #> 20        ResultAnalyticalMethod.MethodIdentifier     2 #> 21 ResultAnalyticalMethod.MethodIdentifierContext     2 #> 22              ResultAnalyticalMethod.MethodName     2 #> 23                          MethodDescriptionText     1 #> 24                                 LaboratoryName     2 #> 25                    ResultLaboratoryCommentText     5 #> 26             DetectionQuantitationLimitTypeName     2 #> 27                     MonitoringLocationTypeName    11 FilterParFieldReview(\"HydrologicEvent\", TADAProfileClean15, \"NITROGEN\") #>       FieldValue Count #> 1 Routine sample    59 TADAProfileClean16 <- dplyr::filter(TADAProfileClean15, !(CharacteristicName %in% \"NITROGEN\" & HydrologicEvent %in% \"Storm\"))"},{"path":"usepa.github.io/tada/articles/WQPDataHarmonization.html","id":"transform-characteristic-speciation-and-unit-values-to-tada-standards","dir":"Articles","previous_headings":"","what":"Transform Characteristic, Speciation, and Unit values to TADA Standards","title":"WQP Data Harmonization","text":"HarmonizeRefTable function generates harmonization reference table specific input dataset. Users can review input data relates standard TADA values following elements: CharacteristicName ResultSampleFractionText MethodSpecicationName ResultMeasure.MeasureUnitCode HarmonizeData function compares input dataset TADA Harmonization Reference Table. purpose function make similar data consistent therefore easier compare analyze. Users can also edit reference file meet needs desired. download argument can used save harmonization file current working directory download = TRUE, default download = FALSE. Optional outputs include: dataset Harmonization columns appended, datset CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode converted TADA standards four fields converted Harmonization Reference Table columns appended. Default transform = TRUE flag = TRUE. examples HarmonizeData function can used: ResultSampleFractionText specifies forms constituents. cases, single CharacteristicName “Total” “Dissolved” forms specified, combined. cases, CharacteristicName ResultSampleFractionText combination given different identifier. identifier can used later identify comparable data groups calculating statistics creating figures combination. variables different names represent constituent (e.g., “Total Kjeldahl nitrogen (Organic N & NH3)” “Kjeldahl nitrogen”). HarmonizeData function gives consistent name (identifier) synonyms.","code":"UniqueHarmonizationRef <- HarmonizationRefTable(TADAProfileClean16, download = FALSE) TADAProfileClean17 <- HarmonizeData(TADAProfileClean16, ref = UniqueHarmonizationRef, transform = TRUE, flag = TRUE)"},{"path":"usepa.github.io/tada/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cristina Mullin. Author, maintainer. Michelle Thawley. Author. Laura Shumway. Author. Jacob Greif. Author.","code":""},{"path":"usepa.github.io/tada/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mullin, C.., Greif, J., Thawley, M., Shumway, L., 2022, TADA: R Tools Automated Data Assessment, U.S. Environmental Protection Agency, Washington, DC","code":"@Manual{,   author = {Cristina A. Mullin and Jacob Greif and Michelle Thawley and Laura Shumway},   title = {TADA: R Tools for Automated Data Assessment},   address = {Washington, DC},   institution = {U.S. Environmental Protection Agency},   year = {2022},   url = {https://github.com/USEPA/TADA}, }"},{"path":"usepa.github.io/tada/readme.html","id":"welcome-to-tada","dir":"","previous_headings":"","what":"Welcome to TADA!","title":"NA","text":"encourage read package’s CONTRIBUTING file, LICENSE, README (). TADA draft R package developed help States, Tribes, Tribal Nations, Pueblos, stakeholders efficiently compile evaluate Water Quality Portal (WQP) data collected surface water monitoring sites. TADA building block support future development TADA R Shiny application. encourage stakeholders test functionality provide feedback. Moreover, open source software provides avenue water quality data originators users develop share code, welcome contributions! information contribute can found CONTRIBUTING file. file explains users can contribute R package submitting issue, requesting change, submitting inquiry. hope build collaborative community dedicated effort contributors can discover, share build package functionality time.","code":""},{"path":"usepa.github.io/tada/readme.html","id":"water-quality-portal","dir":"","previous_headings":"","what":"Water Quality Portal","title":"NA","text":"2012, WQP deployed U.S. Geological Survey (USGS), U.S. Environmental Protection Agency (USEPA), National Water Quality Monitoring Council combine serve water-quality data numerous sources standardized format. WQP holds 420 million water quality sample results 1000 federal, state, tribal partners, nation’s largest source single point access water-quality data. Participating organizations submit data WQP using EPA’s Water Quality Exchange (WQX), framework designed map data holdings common data structure.","code":""},{"path":"usepa.github.io/tada/readme.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NA","text":"can install load recent version TADA R Package GitHub running:","code":"library (remotes) remotes::install_github(\"USEPA/TADA\")"},{"path":"usepa.github.io/tada/readme.html","id":"open-source-code-policy","dir":"","previous_headings":"","what":"Open-Source Code Policy","title":"NA","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":"usepa.github.io/tada/readme.html","id":"license","dir":"","previous_headings":"","what":"License","title":"NA","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/tada/readme.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"NA","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/tada/readme.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"NA","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":"usepa.github.io/tada/reference/AboveNationalWQXUpperThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"EPA's Water Quality Exchange (WQX) generated statistics data millions water quality data points around country. functions leverages statistical data WQX flag data upper threshold result values submitted WQX given characteristic. clean = TRUE, rows values upper WQX threshold removed dataset column appended. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/AboveNationalWQXUpperThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"","code":"AboveNationalWQXUpperThreshold(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/AboveNationalWQXUpperThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":".data TADA dataframe clean Boolean argument; removes data upper WQX threshold dataset clean = TRUE. Default clean = TRUE","code":""},{"path":"usepa.github.io/tada/reference/AboveNationalWQXUpperThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"clean = FALSE, following column added dataset: AboveWQXUpperThreshold. column flags rows data upper WQX threshold. clean = TRUE, data upper WQX threshold removed dataset.","code":""},{"path":"usepa.github.io/tada/reference/AggregatedContinuousData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Aggregated Continuous Data — AggregatedContinuousData","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"Water Quality Portal (WQP) designed store high-frequency sensor data. However, sometimes data providers choose aggregate continuous data submit WQP one value. type data may suitable integration discrete water quality data assessments. Therefore, function uses metadata submitted data providers flags rows aggregated continuous data. done flagging results ResultDetectionConditionText = \"Reported Raw Data (attached)\". clean = TRUE, rows aggregated continuous data removed dataset column appended. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/AggregatedContinuousData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"","code":"AggregatedContinuousData(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/AggregatedContinuousData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":".data TADA dataframe clean Boolean argument; removes aggregated continuous data dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/AggregatedContinuousData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"clean = FALSE, column flagging rows aggregated continuous data appended input data set. clean = TRUE, aggregated continuous data removed dataset.","code":""},{"path":"usepa.github.io/tada/reference/AutoFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"AutoFilter — AutoFilter","title":"AutoFilter — AutoFilter","text":"Function can used autofilter simplify WQP dataset. applying function, dataset contain result values water media types chemicals tissue (e.g. mercury fish tissue). complex biological data (counts macroinvertebrates) removed. function looks following fields autofilter: ActivityMediaName, ActivityMediaSubDivisionName, AssemblageSampledName","code":""},{"path":"usepa.github.io/tada/reference/AutoFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AutoFilter — AutoFilter","text":"","code":"AutoFilter(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/AutoFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AutoFilter — AutoFilter","text":".data TADA dataframe clean Indicates whether flag columns appended data (clean = FALSE), flagged data transformed/filtered dataset columns appended (clean = TRUE).","code":""},{"path":"usepa.github.io/tada/reference/AutoFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AutoFilter — AutoFilter","text":"clean = FALSE, flag column appended dataset. clean = TRUE, flag column appended relevant rows removed.","code":""},{"path":"usepa.github.io/tada/reference/BelowNationalWQXUpperThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"EPA's Water Quality Exchange (WQX) generated statistics data millions water quality data points around country. functions leverages statistical data WQX flag data lower threshold result values submitted WQX given characteristic. clean = TRUE, rows values lower WQX threshold removed dataset column appended. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/BelowNationalWQXUpperThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"","code":"BelowNationalWQXUpperThreshold(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/BelowNationalWQXUpperThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":".data TADA dataframe clean Boolean argument; removes data lower WQX threshold dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/BelowNationalWQXUpperThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"clean = FALSE, following column added dataset: BelowWQXUpperThreshold. column flags rows data lower WQX threshold. clean = TRUE, data lower WQX threshold removed dataset.","code":""},{"path":"usepa.github.io/tada/reference/DepthProfileData.html","id":null,"dir":"Reference","previous_headings":"","what":"Depth Profile Flag & Unit Conversion — DepthProfileData","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"Function checks dataset depth profile data. depth profile columns populated, function appends 'Conversion Factor' columns populates columns based original unit (MeasureUnitCode columns) target unit, defined 'unit' argument. 'Depth Target Unit' column also appended, indicating unit selected depth data converted . transform = FALSE, output includes 'Conversion Factor' columns 'Depth Target Unit' column. transform = TRUE, output includes converted depth data 'Depth Target Unit' column, acts flag indicating rows converted. Default transform = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/DepthProfileData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"","code":"DepthProfileData(   .data,   unit = \"m\",   fields = c(\"ActivityDepthHeightMeasure\", \"ActivityTopDepthHeightMeasure\",     \"ActivityBottomDepthHeightMeasure\", \"ResultDepthHeightMeasure\"),   transform = TRUE )"},{"path":"usepa.github.io/tada/reference/DepthProfileData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":".data TADA dataframe unit Character string input indicating uniform unit depth data converted . Allowable values 'unit' either 'm' (meter), 'ft' (feet), '' (inch). 'unit' accepts one allowable value input. Default unit = \"m\". fields Character string input indicating depth fields checked data. Allowable values 'fields' 'ActivityDepthHeightMeasure,' 'ActivityTopDepthHeightMeasure,' 'ActivityBottomDepthHeightMeasure,' 'ResultDepthHeightMeasure.'. Default include allowable values. transform Boolean argument; transform = FALSE, output includes Conversion Factor' columns 'Depth Target Unit' column. transform = TRUE, output includes converted depth data 'Depth Target Unit' column, acts flag indicating rows converted. Default transform = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/DepthProfileData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"Full dataset converted uniform depth units 'Depth Target Unit' column, acts flag indicating rows converted. transform = FALSE, output full dataset 'Conversion Factor' columns 'Depth Target Unit' column.","code":""},{"path":"usepa.github.io/tada/reference/FilterFieldReview.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of unique values in a given field — FilterFieldReview","title":"Generate list of unique values in a given field — FilterFieldReview","text":"Function creates table pie chart unique values, counts values chosen field dataframe.","code":""},{"path":"usepa.github.io/tada/reference/FilterFieldReview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of unique values in a given field — FilterFieldReview","text":"","code":"FilterFieldReview(field, .data)"},{"path":"usepa.github.io/tada/reference/FilterFieldReview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of unique values in a given field — FilterFieldReview","text":"field Field name .data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/FilterFieldReview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of unique values in a given field — FilterFieldReview","text":"table pie chart unique values selected field.","code":""},{"path":"usepa.github.io/tada/reference/FilterFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of field names — FilterFields","title":"Generate list of field names — FilterFields","text":"Function creates list fields input dataframe well number unique values field. list intended inform users specific fields explore filter.","code":""},{"path":"usepa.github.io/tada/reference/FilterFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of field names — FilterFields","text":"","code":"FilterFields(.data)"},{"path":"usepa.github.io/tada/reference/FilterFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of field names — FilterFields","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/FilterFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of field names — FilterFields","text":"table fields count unique values field.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFieldReview.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"Function creates table pie chart unique values, counts values, chosen field dataframe subset parameter.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFieldReview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"","code":"FilterParFieldReview(field, .data, parameter)"},{"path":"usepa.github.io/tada/reference/FilterParFieldReview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"field Field name .data Optional argument; TADA dataframe parameter Characteristic name (parameter name) dataset.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFieldReview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"table pie chart unique values selected field.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of field names subset by parameter — FilterParFields","title":"Generate list of field names subset by parameter — FilterParFields","text":"Function subsets input dataframe input parameter creates list fields subset dataframe well number unique values field. list intended inform users specific fields explore filter subset parameter.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of field names subset by parameter — FilterParFields","text":"","code":"FilterParFields(.data, parameter)"},{"path":"usepa.github.io/tada/reference/FilterParFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of field names subset by parameter — FilterParFields","text":".data TADA dataframe parameter Characteristic name (parameter name) dataset.","code":""},{"path":"usepa.github.io/tada/reference/FilterParFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of field names subset by parameter — FilterParFields","text":"table fields count unique values field, subset parameter.","code":""},{"path":"usepa.github.io/tada/reference/FilterParList.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of parameters — FilterParList","title":"Generate list of parameters — FilterParList","text":"Function generates list characteristics input dataset, well number records . list intended inform users parameters explore filter.","code":""},{"path":"usepa.github.io/tada/reference/FilterParList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of parameters — FilterParList","text":"","code":"FilterParList(.data)"},{"path":"usepa.github.io/tada/reference/FilterParList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of parameters — FilterParList","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/FilterParList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of parameters — FilterParList","text":"list unique characteristics counts","code":""},{"path":"usepa.github.io/tada/reference/GenerateCensoredDataStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"Function summarizes censored data dataset, including substitutions made.","code":""},{"path":"usepa.github.io/tada/reference/GenerateCensoredDataStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"","code":"GenerateCensoredDataStats(.data)"},{"path":"usepa.github.io/tada/reference/GenerateCensoredDataStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":".data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/GenerateCensoredDataStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"Summary table","code":""},{"path":"usepa.github.io/tada/reference/GetMeasureUnitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table — GetMeasureUnitRef","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"Function downloads returns latest WQX MeasureUnit Domain table, adds additional target unit information, writes data sysdata.rda.","code":""},{"path":"usepa.github.io/tada/reference/GetMeasureUnitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"","code":"GetMeasureUnitRef()"},{"path":"usepa.github.io/tada/reference/GetMeasureUnitRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"sysdata.rda updated WQXunitRef object (unit conversion reference table)","code":""},{"path":"usepa.github.io/tada/reference/GetMeasureUnitRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/tada/reference/GetWQXCharValRef.html","id":null,"dir":"Reference","previous_headings":"","what":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"Function downloads returns newest available (cleaned) raw Water Quality Exchange (WQX) QAQC Characteristic Validation reference table. WQXcharValRef data frame contains information four functions: InvalidFraction, InvalidResultUnit, InvalidSpeciation, UncommonAnalyticalMethodID.","code":""},{"path":"usepa.github.io/tada/reference/GetWQXCharValRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"","code":"GetWQXCharValRef()"},{"path":"usepa.github.io/tada/reference/GetWQXCharValRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"Updated sysdata.rda updated WQXcharValRef object","code":""},{"path":"usepa.github.io/tada/reference/GetWQXCharValRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/tada/reference/HarmonizationRefTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"Function generates harmonization reference table specific input dataset. Users can review input data relates standard TADA values CharacteristicName, ResultSampleFractionText, MethodSpecicationName, ResultMeasure.MeasureUnitCode can optionally edit reference file meet needs.","code":""},{"path":"usepa.github.io/tada/reference/HarmonizationRefTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"","code":"HarmonizationRefTable(.data, download = FALSE)"},{"path":"usepa.github.io/tada/reference/HarmonizationRefTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":".data TADA dataframe download Boolean argument; download = TRUE, output downloaded current working directory.","code":""},{"path":"usepa.github.io/tada/reference/HarmonizationRefTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"Harmonization Reference Table unique input dataset","code":""},{"path":"usepa.github.io/tada/reference/HarmonizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"Function compares input dataset TADA Harmonization Reference Table, makes synonymous data consistent. Optional outputs include: 1) dataset Harmonization columns appended, 2) dataset CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode converted TADA standards 3) four fields converted Harmonization Reference Table columns appended. Default transform = TRUE flag = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/HarmonizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"","code":"HarmonizeData(.data, ref, transform = TRUE, flag = TRUE)"},{"path":"usepa.github.io/tada/reference/HarmonizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":".data TADA dataframe ref Optional argument specify dataframe use reference file. primary use argument user generated harmonization reference file unique data, made changes file. transform Boolean argument; transforms /converts original values dataset TADA Harmonization Reference Table values following fields: CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode. Default transform = TRUE. flag Boolean argument; appends columns TADA Harmonization Reference Table dataframe. Default flag = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/HarmonizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"transform = FALSE flag = TRUE, Harmonization Reference Table columns appended dataset . transform = TRUE flag = TRUE, Harmonization columns appended dataset transformations executed. transform = TRUE flag = FALSE, transformations executed . transform = FALSE flag = FALSE, error returned (function return input dataframe unchanged input allowed).","code":""},{"path":"usepa.github.io/tada/reference/InvalidCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Invalid coordinates — InvalidCoordinates","title":"Invalid coordinates — InvalidCoordinates","text":"Function identifies flags invalid coordinate data. clean_outsideUSA = FALSE clean_imprecise = FALSE, column appended titled \"TADA.InvalidCoordinates\" following flags (relevant dataset). latitude less zero, row flagged \"LAT_OutsideUSA\". longitude greater zero less 145, row flagged \"LONG_OutsideUSA\". latitude longitude contains string, \"999\", row flagged invalid. Finally, precision can measured number decimal places latitude longitude provided. either numbers right decimal point, row flagged \"Imprecise\".","code":""},{"path":"usepa.github.io/tada/reference/InvalidCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invalid coordinates — InvalidCoordinates","text":"","code":"InvalidCoordinates(.data, clean_outsideUSA = FALSE, clean_imprecise = FALSE)"},{"path":"usepa.github.io/tada/reference/InvalidCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invalid coordinates — InvalidCoordinates","text":".data TADA dataframe clean_outsideUSA Boolean argument; removes data coordinates outside United States clean_outsideUSA = TRUE. Default clean = FALSE. clean_imprecise Boolean arguments; removes imprecise data clean_imprecise = TRUE. Default clean_imprecise = FALSE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invalid coordinates — InvalidCoordinates","text":"either clean_outsideUSA clean_imprecise argument FALSE, column flagging rows respective QA check appended input dataset. either argument TRUE, \"invalid\" \"imprecise\" data removed, respectively.","code":""},{"path":"usepa.github.io/tada/reference/InvalidFraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Sample Fraction Validity — InvalidFraction","title":"Check Sample Fraction Validity — InvalidFraction","text":"Function checks validity characteristic-fraction combination dataset. clean = TRUE, rows invalid characteristic-fraction combinations removed. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidFraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Sample Fraction Validity — InvalidFraction","text":"","code":"InvalidFraction(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/InvalidFraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Sample Fraction Validity — InvalidFraction","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-fraction combinations dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidFraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Sample Fraction Validity — InvalidFraction","text":"clean = FALSE, function adds following column dataframe: WQX.SampleFractionValidity. column flags CharacteristicName ResultSampleFractionText combination dataset either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = TRUE, \"Invalid\" rows removed dataset column appended.","code":""},{"path":"usepa.github.io/tada/reference/InvalidMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Invalid Analytical Methods — InvalidMethod","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"Function checks validity characteristic-analytical method combination dataset. clean = TRUE, rows invalid characteristic-analytical method combinations removed. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"","code":"InvalidMethod(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/InvalidMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Invalid Analytical Methods — InvalidMethod","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-analytical method combinations dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"clean = FALSE, function adds following column dataframe: WQX.AnalyticalMethodValidity. column flags invalid CharacteristicName, ResultAnalyticalMethod/MethodIdentifier, ResultAnalyticalMethod/MethodIdentifierContext combinations dataset either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = TRUE, \"Invalid\" rows removed dataset column appended.","code":""},{"path":"usepa.github.io/tada/reference/InvalidResultUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Unit Validity — InvalidResultUnit","title":"Check Result Unit Validity — InvalidResultUnit","text":"Function checks validity characteristic-media-result unit combination dataset. clean = TRUE, rows invalid characteristic-media-result unit combinations removed. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidResultUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Unit Validity — InvalidResultUnit","text":"","code":"InvalidResultUnit(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/InvalidResultUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Unit Validity — InvalidResultUnit","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-media-result unit combinations dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidResultUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Unit Validity — InvalidResultUnit","text":"clean = FALSE, following column added dataset: WQX.ResultUnitValidity. column flags CharacteristicName, ActivityMediaName, ResultMeasure/MeasureUnitCode combination dataset either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = TRUE, \"Invalid\" rows removed dataset column appended.","code":""},{"path":"usepa.github.io/tada/reference/InvalidSpeciation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Method Speciation Validity — InvalidSpeciation","title":"Check Method Speciation Validity — InvalidSpeciation","text":"Function checks validity characteristic-method speciation combination dataset. clean = TRUE, rows invalid characteristic-method speciation combinations removed. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidSpeciation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Method Speciation Validity — InvalidSpeciation","text":"","code":"InvalidSpeciation(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/InvalidSpeciation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Method Speciation Validity — InvalidSpeciation","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-method speciation combinations dataset clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/InvalidSpeciation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Method Speciation Validity — InvalidSpeciation","text":"#'clean = FALSE, function adds following column dataframe: WQX.MethodSpeciationValidity. column flags CharacteristicName MethodSpecificationName combination dataset either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = TRUE, \"Invalid\" rows removed dataset column appended.","code":""},{"path":"usepa.github.io/tada/reference/MeasureValueSpecialCharacters.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Special Characters in Measure Value Fields — MeasureValueSpecialCharacters","title":"Check for Special Characters in Measure Value Fields — MeasureValueSpecialCharacters","text":"Function checks special characters non-numeric values ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields appends flag columns indicating special characters included , special characters . ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields also converted class numeric.","code":""},{"path":"usepa.github.io/tada/reference/MeasureValueSpecialCharacters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Special Characters in Measure Value Fields — MeasureValueSpecialCharacters","text":"","code":"MeasureValueSpecialCharacters(.data)"},{"path":"usepa.github.io/tada/reference/MeasureValueSpecialCharacters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Special Characters in Measure Value Fields — MeasureValueSpecialCharacters","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/MeasureValueSpecialCharacters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Special Characters in Measure Value Fields — MeasureValueSpecialCharacters","text":"Full dataset column indicating presence special characters ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields. Additionally, ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields converted class numeric, copies column created preserve original character values.","code":""},{"path":"usepa.github.io/tada/reference/PotentialDuplicateRowID.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Potential Duplicates — PotentialDuplicateRowID","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"Sometimes multiple organizations submit exact data Water Quality Portal (WQP), can affect water quality analyses assessments. function checks identifies data identical fields excluding organization-specific comment text fields. pair group potential duplicate rows flagged unique ID. clean = TRUE, function retains first occurrence potential duplicate dataset. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/PotentialDuplicateRowID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"","code":"PotentialDuplicateRowID(.data, clean = TRUE)"},{"path":"usepa.github.io/tada/reference/PotentialDuplicateRowID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":".data TADA dataframe clean Boolean argument; removes potential duplicate data dataset clean = TRUE. clean = FALSE, column indicating potential duplicate rows unique number linking rows appended input data set. Default clean = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/PotentialDuplicateRowID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"clean = FALSE, following column added dataframe: TADA.PotentialDupRowID. column flags potential duplicate rows data dataset, assigns potential duplicate combination unique number linking two potential duplication rows. clean = FALSE first group potential duplicate rows removed dataset column appended.","code":""},{"path":"usepa.github.io/tada/reference/QAPPDocAvailable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"Function checks data submitted \"ProjectFileUrl\" column determine QAPP document available review. clean = FALSE, column appended flag results associated QAPP document URL provided. clean = TRUE, rows associated QAPP document removed dataset column appended. function used remove data accompanying QAPP document required use data assessments.","code":""},{"path":"usepa.github.io/tada/reference/QAPPDocAvailable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"","code":"QAPPDocAvailable(.data, clean = FALSE)"},{"path":"usepa.github.io/tada/reference/QAPPDocAvailable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":".data TADA dataframe clean Boolean argument; removes data without associated QAPP document dataset clean = TRUE. Default clean = FALSE.","code":""},{"path":"usepa.github.io/tada/reference/QAPPDocAvailable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"clean = FALSE, column appended input data set flags rows associated QAPP document. clean = TRUE, data without associated QAPP document removed dataset.","code":""},{"path":"usepa.github.io/tada/reference/QAPPapproved.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data for an approved QAPP — QAPPapproved","title":"Check data for an approved QAPP — QAPPapproved","text":"Function checks data submitted column \"QAPPApprovedIndicator\". organizations submit data field indicate data produced approved Quality Assurance Project Plan (QAPP) . Y indicates yes, N indicates .  function two default inputs: clean = TRUE cleanNA = FALSE. default removes rows data QAPPApprovedIndicator equals \"N\". Users alternatively remove N's NA's using inputs clean = TRUE cleanNA = TRUE. clean = FALSE cleanNA = FALSE, function make changes data.","code":""},{"path":"usepa.github.io/tada/reference/QAPPapproved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data for an approved QAPP — QAPPapproved","text":"","code":"QAPPapproved(.data, clean = TRUE, cleanNA = FALSE)"},{"path":"usepa.github.io/tada/reference/QAPPapproved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data for an approved QAPP — QAPPapproved","text":".data TADA dataframe clean Boolean argument two possible values called \"TRUE\" \"FALSE\". clean=TRUE, rows data QAPPApprovedIndicator equals \"N\" removed. , clean=FALSE, rows data QAPPApprovedIndicator equals \"N\" retained. cleanNA Boolean argument two possible values called \"TRUE\" \"FALSE\". cleanNA=TRUE, rows data QAPPApprovedIndicator equals \"NA\" removed. , cleanNA=FALSE, rows data QAPPApprovedIndicator equals \"NA\" retained.","code":""},{"path":"usepa.github.io/tada/reference/QAPPapproved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data for an approved QAPP — QAPPapproved","text":"clean = FALSE cleanNA = FALSE, data removed dataset.","code":""},{"path":"usepa.github.io/tada/reference/QAPPapproved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check data for an approved QAPP — QAPPapproved","text":"Note: required field, often left blank (NA) even data associated QAPP. states tribes collect monitoring data using 106 funding (almost state tribal data WQX) required EPA approved QAPP receive 106 funding. Therefore, organizations data approved QAPP even data submitted WQP NA.","code":""},{"path":"usepa.github.io/tada/reference/RemoveEmptyColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"RemoveEmptyColumns — RemoveEmptyColumns","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"Removes columns NA values. Used quickly reduce number columns dataframe improve management readability dataset.","code":""},{"path":"usepa.github.io/tada/reference/RemoveEmptyColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"","code":"RemoveEmptyColumns(.data)"},{"path":"usepa.github.io/tada/reference/RemoveEmptyColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":".data Dataframe","code":""},{"path":"usepa.github.io/tada/reference/RemoveEmptyColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"Full dataset empty data columns removed","code":""},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"function multiple synchronous data calls WQP (waterqualitydata.us). uses WQP summary service limit amount downloaded relevant data, pulls back data 100 stations time joins data back together produces single TADA compatible dataframe output. large data sets, can save lot time ultimately reduce complexity subsequent data processing. Using function, able download data available sites contiguous United States available time period, characteristicName, siteType requested.","code":""},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"","code":"TADABigdataRetrieval(   startDate = \"null\",   endDate = \"null\",   characteristicName = \"null\",   siteType = \"null\" )"},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"startDate Start Date YYYY-MM-DD format, example, \"1995-01-01\" endDate end date YYYY-MM-DD format, example, \"2020-12-31\" characteristicName Name water quality parameter siteType Name water body type (e.g., \"Stream\", \"Lake, Reservoir, Impoundment\")","code":""},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"TADA-compatible dataframe","code":""},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"Similarly TADAdataRetrieval function, function create /edit following columns: TADA.DetectionLimitMeasureValue.Flag DetectionQuantitationLimitMeasure.MeasureValue DetectionLimitMeasureValue.Original ResultMeasureValue.Original TADA.ResultMeasureValue.Flag ResultMeasureValue data cleaning transformations done directly \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns, however original \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns values WQP preserved new fields, \"ResultMeasureValue.Original\" \"DetectionLimitMeasureValue.Original\". Additionally, \"TADA.ResultMeasureValue.Flag\" \"TADA.DetectionLimitMeasureValue.Flag\" created track changes made \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns; provide information result values needed address censored data later (.e., nondetections) See ?MeasureValueSpecialCharacters ?autoclean documentation information.","code":""},{"path":"usepa.github.io/tada/reference/TADABigdataRetrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"","code":"if (FALSE) { tada2 <- TADABigdataRetrieval(startDate = \"01-01-2021\",                                endDate = \"01-01-2022\",                                characteristicName = \"Nitrogen\",                               siteType = \"Stream\") }"},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"Retrieve data Water Quality Portal (WQP) output TADA-compatible dataset.","code":""},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"","code":"TADAdataRetrieval(   statecode = \"null\",   startDate = \"null\",   countycode = \"null\",   siteid = \"null\",   siteType = \"null\",   characteristicName = \"null\",   ActivityMediaName = \"null\",   endDate = \"null\" )"},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"statecode Code identifies state startDate Start Date countycode Code identifies county siteid Unique monitoring station identifier siteType Type waterbody characteristicName Name parameter ActivityMediaName Sampling substrate water, air, sediment endDate End Date","code":""},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"TADA-compatible dataframe","code":""},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"Keep mind query filters WQP work within fields ORs. example, characteristics – choose pH & – ’s . Similarly, choose VA IL, ’s . combo fields ANDs. State/VA Characteristic/\". \"Characteristic\" \"Characteristic Group\" also work . function create /edit following columns: TADA.DetectionLimitMeasureValue.Flag DetectionQuantitationLimitMeasure.MeasureValue DetectionLimitMeasureValue.Original ResultMeasureValue.Original TADA.ResultMeasureValue.Flag ResultMeasureValue data cleaning transformations done directly \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns, however original \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns values WQP preserved new fields, \"ResultMeasureValue.Original\" \"DetectionLimitMeasureValue.Original\". Additionally, \"TADA.ResultMeasureValue.Flag\" \"TADA.DetectionLimitMeasureValue.Flag\" created track changes made \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns; provide information result values needed address censored data later (.e., nondetections) See ?MeasureValueSpecialCharacters ?autoclean documentation information.","code":""},{"path":"usepa.github.io/tada/reference/TADAdataRetrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate TADA-Compatible Dataset with WQP Data — TADAdataRetrieval","text":"","code":"if (FALSE) { tada1 <- TADAdataRetrieval(statecode = \"WI\",                            countycode = \"Dane\",                            characteristicName = \"Phosphorus\") }"},{"path":"usepa.github.io/tada/reference/TADAprofileCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"TADA Profile Check — TADAprofileCheck","title":"TADA Profile Check — TADAprofileCheck","text":"function checks column names dataframe include TADA profile fields. used beginning TADA functions ensure input data frame suitable (.e. either full physical/chemical results profile downloaded WQP TADA profile template downloaded EPA TADA webpage.)","code":""},{"path":"usepa.github.io/tada/reference/TADAprofileCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TADA Profile Check — TADAprofileCheck","text":"","code":"TADAprofileCheck(.data)"},{"path":"usepa.github.io/tada/reference/TADAprofileCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TADA Profile Check — TADAprofileCheck","text":".data dataframe","code":""},{"path":"usepa.github.io/tada/reference/TADAprofileCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TADA Profile Check — TADAprofileCheck","text":"Boolean result indicating whether input dataframe contains TADA profile fields.","code":""},{"path":"usepa.github.io/tada/reference/TransformCensoredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"Function substitutes monitoring device/method detection limits (available) result values applicable.","code":""},{"path":"usepa.github.io/tada/reference/TransformCensoredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"","code":"TransformCensoredData(transform, .data)"},{"path":"usepa.github.io/tada/reference/TransformCensoredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE. .data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/TransformCensoredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"transform=TRUE, monitoring device/method detection limits (available) substituted result values units. transform = FALSE, monitoring device/method detection limits (available) substituted result values units - Instead, columns appended rows may include censored data. flag indicates 1) row contains censored data, 2) monitoring device/method detection limits available.","code":""},{"path":"usepa.github.io/tada/reference/UpdateMeasureUnitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","text":"Update Measure Unit Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/tada/reference/UpdateMeasureUnitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","text":"","code":"UpdateMeasureUnitRef()"},{"path":"usepa.github.io/tada/reference/UpdateWQXCharValRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Characteristic Validation Reference Table internal file\n(for internal use only) — UpdateWQXCharValRef","title":"Update Characteristic Validation Reference Table internal file\n(for internal use only) — UpdateWQXCharValRef","text":"Update Characteristic Validation Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/tada/reference/UpdateWQXCharValRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Characteristic Validation Reference Table internal file\n(for internal use only) — UpdateWQXCharValRef","text":"","code":"UpdateWQXCharValRef()"},{"path":"usepa.github.io/tada/reference/WQXCharValRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"Used store cached WQX QAQC Characteristic Validation Reference Table","code":""},{"path":"usepa.github.io/tada/reference/WQXCharValRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"","code":"WQXCharValRef_Cached"},{"path":"usepa.github.io/tada/reference/WQXCharValRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"object class NULL length 0.","code":""},{"path":"usepa.github.io/tada/reference/WQXTargetUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Units to WQX Target Units — WQXTargetUnits","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"function compares measure units input data Water Quality Exchange (WQX) 3.0 QAQC Characteristic Validation table.","code":""},{"path":"usepa.github.io/tada/reference/WQXTargetUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"","code":"WQXTargetUnits(.data, transform = TRUE)"},{"path":"usepa.github.io/tada/reference/WQXTargetUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":".data TADA dataset transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE.","code":""},{"path":"usepa.github.io/tada/reference/WQXTargetUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"transform=TRUE, result values units converted WQX target units. function changes values within \"ResultMeasure.MeasureUnitCode\" \"DetectionQuantitationLimitMeasure.MeasureUnitCode\" WQX target units converts respective values within \"ResultMeasureValue\" \"DetectionQuantitationLimitMeasure.MeasureValue\" fields. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\", transform=TRUE add following two fields input dataset, \"ResultMeasureUnitCode.Original\", \"DetectionLimitMeasureUnitCode.Original\", retain original result unit values. transform = FALSE, result values units converted WQX target units, columns appended indicate target units conversion factors , data can converted. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\",  transform=FALSE add following two fields input dataset: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/tada/reference/WQXTargetUnits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"function ALWAYS add following two columns input dataset: \"WQX.ResultMeasureValue.UnitConversion\", \"WQX.DetectionLimitMeasureValue.UnitConversion\" two fields indicate data can converted.\"NoResultValue\" means data converted ResultMeasureValue, \"NoTargetUnit\" means data converted original unit associated target unit WQX. \"Convert\" means data can transformed, \"Converted\" means function run input transform = TRUE, values already converted. also uses following six fields input dataset: \"CharacteristicName\", \"ActivityMediaName\", \"ResultMeasureValue\", \"ResultMeasure.MeasureUnitCode\", \"DetectionQuantitationLimitMeasure.MeasureValue\", \"DetectionQuantitationLimitMeasure.MeasureUnitCode\" function adds following two fields transforms values within following four fields transform=TRUE: Adds: \"ResultMeasureUnitCode.Original\", \"DetectionLimitMeasureUnitCode.Original\". Transforms: \"ResultMeasureValue\", \"ResultMeasure.MeasureUnitCode\", \"DetectionQuantitationLimitMeasure.MeasureValue\", \"DetectionQuantitationLimitMeasure.MeasureUnitCode\". function adds following two fields transform=FALSE: Adds: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/tada/reference/WQXunitRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"Used store cached Measure Unit Reference Table","code":""},{"path":"usepa.github.io/tada/reference/WQXunitRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"","code":"WQXunitRef_Cached"},{"path":"usepa.github.io/tada/reference/WQXunitRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"object class NULL length 0.","code":""},{"path":"usepa.github.io/tada/reference/autoclean.html","id":null,"dir":"Reference","previous_headings":"","what":"autoclean — autoclean","title":"autoclean — autoclean","text":"Removes complex biological data. Removes non-water media samples. Removes rows data true duplicates. Capitalizes fields harmonize data. function includes runs TADA \"MeasureValueSpecialCharacters\" function well.","code":""},{"path":"usepa.github.io/tada/reference/autoclean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autoclean — autoclean","text":"","code":"autoclean(.data)"},{"path":"usepa.github.io/tada/reference/autoclean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autoclean — autoclean","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/tada/reference/autoclean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autoclean — autoclean","text":"autocleaned TADA data profile","code":""},{"path":"usepa.github.io/tada/reference/autoclean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"autoclean — autoclean","text":"Within \"BiologicalIntentName\", allowable values \"tissue\", \"toxicity\", \"NA\" apply non-biological data (function removes others). Toxicity fish tissue data kept, types biological monitoring data . decided make fields uppercase way compatible WQX validation reference tables avoid issues case-sensitivity joining data. Therefore, might need tack immediate QA steps (removing true duplicates, converting result values numeric, capitalizing letters, etc.) function, well retrieval functions.","code":""},{"path":"usepa.github.io/tada/reference/decimalnumcount.html","id":null,"dir":"Reference","previous_headings":"","what":"decimalnumcount — decimalnumcount","title":"decimalnumcount — decimalnumcount","text":"character data type","code":""},{"path":"usepa.github.io/tada/reference/decimalnumcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decimalnumcount — decimalnumcount","text":"","code":"decimalnumcount(x)"},{"path":"usepa.github.io/tada/reference/decimalnumcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decimalnumcount — decimalnumcount","text":"x Numeric data field TADA profile","code":""},{"path":"usepa.github.io/tada/reference/decimalnumcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decimalnumcount — decimalnumcount","text":"Number values right decimal point character type data.","code":""},{"path":"usepa.github.io/tada/reference/decimalplaces.html","id":null,"dir":"Reference","previous_headings":"","what":"decimalplaces — decimalplaces","title":"decimalplaces — decimalplaces","text":"numeric data type","code":""},{"path":"usepa.github.io/tada/reference/decimalplaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decimalplaces — decimalplaces","text":"","code":"decimalplaces(x)"},{"path":"usepa.github.io/tada/reference/decimalplaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decimalplaces — decimalplaces","text":"x Numeric data field TADA profile","code":""},{"path":"usepa.github.io/tada/reference/decimalplaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decimalplaces — decimalplaces","text":"Number values right decimal point numeric type data.","code":""},{"path":"usepa.github.io/tada/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"usepa.github.io/tada/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"usepa.github.io/tada/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"usepa.github.io/tada/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"usepa.github.io/tada/reference/readWQPwebservice.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in WQP data using WQP web services directly — readWQPwebservice","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"Go WQP website (https://www.waterqualitydata.us/) fill advanced query form. Choose Full Physical Chemical Data Profile, data sources, file format Comma-Separated. finished, hit download button. Instead, copy web service URL located bottom page header \"Result\". Use \"Result\" web service URL input function download data directly R.","code":""},{"path":"usepa.github.io/tada/reference/readWQPwebservice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"","code":"readWQPwebservice(webservice)"},{"path":"usepa.github.io/tada/reference/readWQPwebservice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"webservice WQP Web Service URL, entered within quotes \"url\"","code":""},{"path":"usepa.github.io/tada/reference/readWQPwebservice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"WQP Full Physical Chemical Results Data Profile","code":""},{"path":"usepa.github.io/tada/reference/readWQPwebservice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"Note: may useful save Query URL well comment within code. URL return WQP query page original data filters.","code":""}]
